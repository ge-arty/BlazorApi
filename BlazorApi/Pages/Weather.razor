<!-- Weather.razor -->
@page "/weather"
@inject HttpClient Http
@using BlazorApi.Models

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

<input @bind="searchKeyword" placeholder="Enter search keyword" />
<button @onclick="SearchForecasts">Search</button>

<select @bind="selectedSortOrder">
    <option value="Newest">Newest</option>
    <option value="Oldest">Oldest</option>
</select>

<button @onclick="SortAndSearchForecasts">Sort and Search</button>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in filteredAndSortedForecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecastModel[]? forecasts;
    private List<WeatherForecastModel>? filteredAndSortedForecasts;
    private string selectedSortOrder = "Newest";
    private string searchKeyword = "";

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecastModel[]>("sample-data/weather.json");
        SortAndSearchForecasts();
    }

    private void SortAndSearchForecasts()
    {
        SortForecasts();
        SearchForecasts();
    }

    private void SortForecasts()
    {
        if (forecasts != null)
        {
            filteredAndSortedForecasts = selectedSortOrder switch
            {
                "Newest" => forecasts.OrderByDescending(f => f.Date).ToList(),
                "Oldest" => forecasts.OrderBy(f => f.Date).ToList(),
                _ => forecasts.ToList(),
            };
        }
    }

    private void SearchForecasts()
    {
        if (string.IsNullOrWhiteSpace(searchKeyword))
        {
            return;
        }

        if (filteredAndSortedForecasts != null)
        {
            filteredAndSortedForecasts = filteredAndSortedForecasts
                .Where(f => f.Summary?.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase) ?? false)
                .ToList();
        }
    }
}
